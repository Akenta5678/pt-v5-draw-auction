// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.17;

import { PrizePool } from "v5-prize-pool/PrizePool.sol";

import { Auction, AuctionLib } from "src/auctions/Auction.sol";
import { TwoStepsAuction, RNGInterface } from "src/auctions/TwoStepsAuction.sol";
import { RewardLib } from "src/libraries/RewardLib.sol";

/**
 * @title PoolTogether V5 DrawAuctionDispatcher
 * @author PoolTogether Inc. Team
 * @notice The DrawAuctionDispatcher uses an auction mechanism to incentivize the completion of the Draw.
 *         This mechanism relies on a linear interpolation to incentivizes anyone to start and complete the Draw.
 *         The first user to complete the Draw gets rewarded with the partial or full PrizePool reserve amount.
 */
contract DrawAuctionDispatcher is TwoStepsAuction {
  /* ============ Events ============ */

  /**
   * @notice Event emitted when the dispatcher is set.
   * @param dispatcher Address of the dispatcher on Ethereum that will dispatch the phases and random number
   */
  event DispatcherSet(ISingleMessageDispatcher indexed dispatcher);

  /**
   * @notice Event emitted when the RNG and auction phases have been dispatched.
   * @param dispatcher Address of the dispatcher on Ethereum that dispatched the phases and random number
   * @param toChainId ID of the receiving chain
   * @param drawAuctionExecutor Address of the DrawAuctionExecutor on the receiving chain that will award the auction and complete the Draw
   * @param phases Array of auction phases
   * @param randomNumber Random number computed by the RNG
   */
  event RNGDispatched(
    ISingleMessageDispatcher indexed dispatcher,
    uint256 indexed toChainId,
    address indexed drawAuctionExecutor,
    AuctionLib.Phases[] phases,
    uint256 randomNumber
  );


  /* ============ Variables ============ */

  /// @notice Address of the dispatcher on Ethereum
  ISingleMessageDispatcher internal _dispatcher;

  /// @notice Instance of the PrizePool to compute Draw for.
  PrizePool internal immutable _prizePool;

  /* ============ Custom Errors ============ */

  /// @notice Thrown when the Dispatcher address passed to the constructor is zero address.
  error DispatcherZeroAddress();

  /// @notice Thrown when the PrizePool address passed to the constructor is zero address.
  error PrizePoolZeroAddress();

  /* ============ Constructor ============ */

  /**
   * @notice Contract constructor.
   * @param dispatcher_ Address of the dispatcher on Ethereum that will dispatch the phases and random number
   * @param rng_ Address of the RNG service
   * @param rngTimeout_ Time in seconds before an RNG request can be cancelled
   * @param prizePool_ Address of the prize pool
   * @param _auctionPhases Number of auction phases
   * @param auctionDuration_ Duration of the auction in seconds
   * @param _owner Address of the DrawAuctionDispatcher owner
   */
  constructor(
    ISingleMessageDispatcher dispatcher_,
    RNGInterface rng_,
    uint32 rngTimeout_,
    PrizePool prizePool_,
    uint8 _auctionPhases,
    uint32 auctionDuration_,
    address _owner
  ) TwoStepsAuction(rng_, rngTimeout_, _auctionPhases, auctionDuration_, _owner) {
    if (address(prizePool_) == address(0)) revert PrizePoolZeroAddress();
    _prizePool = prizePool_;

    _setDispatcher(dispatcher_);
  }

  /* ============ External Functions ============ */

  /* ============ Setter Functions ============ */

    /**
   * @notice Set the dispatcher.
   * @dev Only callable by the owner.
   * @param dispatcher_ Address of the dispatcher
   */
  function setDispatcher(ISingleMessageDispatcher dispatcher_) external onlyOwner {
    _setDispatcher(dispatcher_);
  }

  /* ============ Internal Functions ============ */

  /* ============ Hooks ============ */

  /**
   * @notice Hook called after the auction has ended.
   * @param _auctionPhases Array of auction phases
   * @param _randomNumber Random number generated by the RNG service
   */
  function _afterAuctionEnds(AuctionLib.Phase[] memory _auctionPhases, uint256 _randomNumber) internal override {
        _dispatchMessage(
            _toChainId,
            _drawExecutor,
            abi.encodeWithSignature("pushDraw((uint256,uint32,uint64,uint64,uint32))", _draw)
        );

    emit RNGDispatched(_auctionPhases, _randomNumber);
  }

  /* ============ Dispatch ============ */

  /**
   * @notice Dispatch encoded call.
   * @param _dispatcher Address of the dispatcher on Ethereum that will dispatch the call
   * @param _toChainId ID of the receiving chain
   * @param _drawExecutor Address of the DrawExecutor on the receiving chain that will receive the call
   * @param _data Calldata to dispatch
   */
  function _dispatchMessage(
    uint256 _toChainId,
    address _drawExecutor,
    bytes memory _data
  ) internal {
    require(address(_dispatcher) != address(0), "DD/dispatcher-not-zero-address");
    require(_drawExecutor != address(0), "DD/drawExecutor-not-zero-address");

    _dispatcher.dispatchMessage(_toChainId, _drawExecutor, _data);
  }

  /* ============ Setters ============ */

  /**
   * @notice Set the dispatcher.
   * @param dispatcher_ Address of the dispatcher
   */
  function _setDispatcher(ISingleMessageDispatcher dispatcher_) internal {
    if (address(dispatcher_) == address(0)) revert DispatcherZeroAddress();
    _dispatcher = dispatcher_;
    emit DispatcherSet(dispatcher_);
  }
}
