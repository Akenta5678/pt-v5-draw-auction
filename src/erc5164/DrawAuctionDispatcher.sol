// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import { DrawAuction } from "local-draw-auction/abstract/DrawAuction.sol";
import { RNGAuction } from "local-draw-auction/RNGAuction.sol";
import { Phase } from "local-draw-auction/abstract/PhaseManager.sol";
import { ISingleMessageDispatcher } from "local-draw-auction/interfaces/ISingleMessageDispatcher.sol";

/**
 * @title PoolTogether V5 DrawAuctionDispatcher
 * @author Generation Software Team
 * @notice The DrawAuctionDispatcher extends the DrawAuction contract and sends the random
 * number and auction data to the DrawAuctionExecutor on the destination chain when the
 * draw auction completes.
 */
contract DrawAuctionDispatcher is DrawAuction {
  /* ============ Events ============ */

  /**
   * @notice Event emitted when the RNG and auction phases have been dispatched.
   * @param dispatcher Instance of the dispatcher on Ethereum that dispatched the phases and random number
   * @param toChainId ID of the receiving chain
   * @param drawAuctionExecutor Address of the DrawAuctionExecutor on the receiving chain that will award the auction and complete the Draw
   * @param randomNumber Random number computed by the RNG
   * @param phases Array of auction phases
   */
  event AuctionDispatched(
    ISingleMessageDispatcher indexed dispatcher,
    uint256 indexed toChainId,
    address indexed drawAuctionExecutor,
    uint256 randomNumber,
    Phase[] phases
  );

  /* ============ Custom Errors ============ */

  /// @notice Thrown when the Dispatcher address passed to the constructor is zero address.
  error DispatcherZeroAddress();

  /// @notice Thrown when the toChainId passed to the constructor is zero.
  error ToChainIdZero();

  /// @notice Thrown when the DrawAuctionExecutor address passed to the constructor is zero address.
  error DrawAuctionExecutorZeroAddress();

  /* ============ Variables ============ */

  /// @notice Instance of the dispatcher on Ethereum
  ISingleMessageDispatcher internal _dispatcher;

  /// @notice ID of the receiving chain
  uint256 internal immutable _toChainId;

  /// @notice Address of the DrawAuctionExecutor to compute Draw for.
  address internal _drawAuctionExecutor;

  /* ============ Constructor ============ */

  /**
   * @notice Contract constructor.
   * @param dispatcher_ Instance of the dispatcher on Ethereum that will dispatch the phases and random number
   * @param drawAuctionExecutor_ Address of the DrawAuctionExecutor on the destination chain
   * @param toChainId_ ID of the receiving chain
   * @param rngAuction_ The RNGAuction to get the random number from
   * @param auctionDurationSeconds_ Auction duration in seconds
   * @param auctionName_ Name of the auction
   */
  constructor(
    ISingleMessageDispatcher dispatcher_,
    address drawAuctionExecutor_,
    uint256 toChainId_,
    RNGAuction rngAuction_,
    uint64 auctionDurationSeconds_,
    string memory auctionName_
  ) DrawAuction(rngAuction_, auctionDurationSeconds_, 2, auctionName_) {
    _setDispatcher(dispatcher_);
    _setDrawAuctionExecutor(drawAuctionExecutor_);

    if (toChainId_ == 0) revert ToChainIdZero();
    _toChainId = toChainId_;
  }

  /* ============ External Functions ============ */

  /* ============ Getters ============ */

  /**
   * @notice Get the dispatcher.
   * @return Instance of the dispatcher
   */
  function dispatcher() external view returns (ISingleMessageDispatcher) {
    return _dispatcher;
  }

  /**
   * @notice Get the drawAuctionExecutor address on the receiving chain.
   * @return Address of the DrawAuctionExecutor on the receiving chain
   */
  function drawAuctionExecutor() external view returns (address) {
    return _drawAuctionExecutor;
  }

  /**
   * @notice Get the toChainId.
   * @return ID of the receiving chain
   */
  function toChainId() external view returns (uint256) {
    return _toChainId;
  }

  /* ============ DrawAuction Overrides ============ */

  /**
   * @inheritdoc DrawAuction
   * @dev Completes the auction by dispatching the completed phases and random number through the dispatcher
   */
  function _afterCompleteDraw(uint256 _randomNumber) internal override {
    Phase[] memory _auctionPhases = _getPhases();

    _dispatcher.dispatchMessage(
      _toChainId,
      _drawAuctionExecutor,
      abi.encodeWithSignature(
        "completeAuction(uint256,(uint8,uint64,uint64,address)[])",
        _randomNumber,
        _auctionPhases
      )
    );

    emit AuctionDispatched(
      _dispatcher,
      _toChainId,
      _drawAuctionExecutor,
      _randomNumber,
      _auctionPhases
    );
  }

  /**
   * @notice Completes the auction by dispatching the completed phases and random number through the dispatcher
   * @param _randomNumber Random number generated by the RNG service
   */
  function completeAuction(uint256 _randomNumber) external {}

  /* ============ Internal Functions ============ */

  /* ============ Setters ============ */

  /**
   * @notice Set the dispatcher.
   * @param dispatcher_ Address of the dispatcher
   */
  function _setDispatcher(ISingleMessageDispatcher dispatcher_) internal {
    if (address(dispatcher_) == address(0)) revert DispatcherZeroAddress();
    _dispatcher = dispatcher_;
  }

  /**
   * @notice Set the drawAuctionExecutor.
   * @param drawAuctionExecutor_ Address of the drawAuctionExecutor
   */
  function _setDrawAuctionExecutor(address drawAuctionExecutor_) internal {
    if (drawAuctionExecutor_ == address(0)) revert DrawAuctionExecutorZeroAddress();
    _drawAuctionExecutor = drawAuctionExecutor_;
  }
}
