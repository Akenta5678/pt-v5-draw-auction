// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import { AccessControl } from "openzeppelin/access/AccessControl.sol";
import { PrizePool } from "v5-prize-pool/PrizePool.sol";

import { Phase } from "local-draw-auction/abstract/PhaseManager.sol";
import { RewardLib } from "local-draw-auction/libraries/RewardLib.sol";
import { IDrawManager } from "local-draw-auction/interfaces/IDrawManager.sol";

/**
 * @title PoolTogether V5 DrawManager
 * @author Generation Software Team
 * @notice The DrawManager completes the pending draw with the given random number
 * and awards the auction phase recipients with rewards from the prize pool reserve.
 */
contract DrawManager is IDrawManager, AccessControl {
  /* ============ Constants ============ */

  /// @notice The draw closer role identifier
  bytes32 public constant DRAW_CLOSER_ROLE = bytes32(uint256(0x01));

  /// @notice The prize pool to manage draws for
  PrizePool public immutable prizePool;

  /* ============ Custom Errors ============ */

  /// @notice Thrown if the prize pool address is the zero address.
  error PrizePoolZeroAddress();

  /* ============ Events ============ */

  /**
   * @notice Emitted when a reward for an auction is distributed to a recipient
   * @param recipient The recipient address of the reward
   * @param phaseId The ID of the auction phase completed for the reward
   * @param reward The reward amount
   */
  event AuctionRewardDistributed(address indexed recipient, uint8 indexed phaseId, uint104 reward);

  /* ============ Constructor ============ */

  /**
   * @notice Deploy the DrawManager smart contract.
   * @param prizePool_ The prize pool to manage draws for
   * @param admin_ Admin of this contract
   * @param drawCloser_ Address that is assigned the draw closer role
   */
  constructor(PrizePool prizePool_, address admin_, address drawCloser_) AccessControl() {
    if (address(prizePool_) == address(0)) revert PrizePoolZeroAddress();
    _grantRole(DEFAULT_ADMIN_ROLE, admin_);
    _grantRole(DRAW_CLOSER_ROLE, drawCloser_);
    prizePool = prizePool_;
  }

  /* ============ External Functions ============ */

  /**
   * @notice Called to close a draw and award the completers of each auction phase.
   * @param _auctionPhases Array of auction phases
   * @param _randomNumber Random number generated by the RNG service
   * @dev This function can only be called by the manager address.
   */
  function closeDraw(
    uint256 _randomNumber,
    Phase[] memory _auctionPhases
  ) external onlyRole(DRAW_CLOSER_ROLE) {
    prizePool.closeDraw(_randomNumber);

    uint256[] memory _rewards = RewardLib.rewards(_auctionPhases, prizePool.reserve());

    for (uint8 i = 0; i < _rewards.length; i++) {
      uint104 _reward = uint104(_rewards[i]);
      prizePool.withdrawReserve(_auctionPhases[i].recipient, _reward);
      emit AuctionRewardDistributed(_auctionPhases[i].recipient, i, _reward);
    }
  }
}
